Metadata-Version: 1.1
Name: pifacecad
Version: 2.0.8
Summary: The PiFace Control And Display module.
Home-page: http://piface.github.io/pifacecad/
Author: Thomas Preston
Author-email: thomas.preston@openlx.org.uk
License: GPLv3+
Description: pifacecad
        =========
        
        PiFace Control and Display Python module.
        
        Contrast is adjusted with screwdriver + screw by IR node.
        
        
        Documentation
        =============
        
        [http://pifacecad.readthedocs.org/](http://pifacecad.readthedocs.org/)
        
        You can also find the documentation and some examples installed at:
        
            /usr/share/doc/python3-pifacecad/
        
        Install
        =======
        
        Make sure you are using the latest version of Raspbian:
        
            $ sudo apt-get update
            $ sudo apt-get upgrade
        
        Install `pifacecad` (for Python 3 and 2) with the following command:
        
            $ sudo apt-get install python{,3}-pifacecad
        
        Test by running the `sysinfo.py` program:
        
            $ python3 /usr/share/doc/python3-pifacecad/examples/sysinfo.py
        
        You will need to [configure the IR receiver](http://pifacecad.readthedocs.org/en/latest/lirc.html).
        
        Install on Raspbian Strech and RaspberryPi 3
        ============================================
        
        The piface packages are currently not in the main repositories. You can,
        however, simply build them from their sources:
        
        * Enable the spi-interface:
        
        ```
        	$ sudo raspi-config
        	Interfacing Options -> SPI -> Yes
        ```
        * https://github.com/tompreston/python-lirc
        ```
        	$ sudo aptitude install liblircclient-dev cython gcc python{,3}-setuptools python{,3}-dev
        	$ git clone https://github.com/tompreston/python-lirc.git
        	$ cd python-lirc/
        	$ make py3 && sudo python3 setup.py install
        	$ make py2 && sudo python setup.py install
        ```
        * https://github.com/piface/pifacecommon
        ```
        	$ git clone https://github.com/piface/pifacecommon.git
        	$ cd pifacecommon/
        	$ sudo python setup.py install
        	$ sudo python3 setup.py install
        ```
        * https://github.com/piface/pifacecad
        ```
        	$ git clone https://github.com/piface/pifacecad.git
        	$ cd pifacecad/
        	$ sudo python setup.py install
        	$ sudo python3 setup.py install
        ```
        * run the hello world demo:
        ```
        	>>> import pifacecad
        
        	>>> cad = pifacecad.PiFaceCAD()    # create PiFace Control and Display object
        	>>> cad.lcd.backlight_on()         # turns the backlight on
        	>>> cad.lcd.write("Hello, world!") # writes hello world on to the LCD
        ```
        * Cleanup: 
        ```
        	$ sudo rm -rf pifacecad/ pifacecommon/ python-lirc/
        ```
        Change Log
        ==========
        
        v2.0.8
        ------
        - Updated LIRC setup script so that it works for Kernel >= v3.18.5+
        
        v2.0.7
        ------
        - Fixed bug in sysinfo, using floats instead.
        
        v2.0.6
        ------
        - Added reference to examples location after installation instructions.
        - Added included examples section in docs.
        
        v2.0.5
        ------
        - Fixed a bug in LCDQuestion.
        
        v2.0.4
        ------
        - Fixed a typo in the docs.
        
        v2.0.3
        ------
        - Updated documentation. Examples page, creating custom bitmaps and tools.
        - Fixed bug in LCDQuestion.
        
        v2.0.2
        ------
        - Updated lirc docs.
        
        v2.0.1
        ------
        - Fixed init bug where display_control and other vars would not exist.
        
        v2.0.0
        ------
        - Updated for compatibility with pifacecommon v4.0.0.
        - All occurrences of `board_num` have been replaced with `hardware_addr` which
          is more appropriate.
        - PiFace Control and Display is initialised when you instantiate the object.
          **You do not need to call pifacecad.init() any more.**
        - PiFaceCAD inherits registers from MCP23S17 so you can access all the
          registers on the chip. For example GPPUP:
        
              >>> cad = PiFaceCAD()
              >>> cad.gppub.value = 0xff
              >>> cad.gppub.bits[4].value = 1
        
        - SwitchEventListener now requires that you provide a chip object, not
          a hardware_addr (board_num). This defaults to PiFaceCAD(hardware_addr=0).
        - Interrupt events contain a chip object representing the calling chip instead
          of the hardware_addr (board_num). You can still access the
          hardware_addr (board_num) like so:
        
              >>> def my_callback(event):
              ...     print(event.chip.hardware_addr)
        
        - Removed the Switch class. It added arbitrary restrictions and
          was not very useful. `pifacecommon.mcp23s17.MCP23S17RegisterBit` is more
          appropriate.
        - Updated examples to reflect new changes.
        - See the docs (particularly the examples) for more information.
        
        v1.1.3 *ignore*
        ---------------
        - Fixed weather.py example (import sys).
        
        v1.1.2 *ignore*
        ---------------
        - Fixed toggle_mask bug and updated test_switches.
        
        v1.1.1 *ignore*
        ---------------
        - Updated for compatibility with pifacecommon v4.0.0.
          *v2.0.0 note: this is a lie, the 4.0.0 version of  pifacecommon that
          this point talks about was never merged into master. Ignore all
          versions of pifacecad up until v2.0.0*
        
        v1.1.0
        ------
        - Added bus and chip select.
        - Added board detection and optional board initialisation.
        - Added IODIR_FALLING_EDGE and IODIR_RISING_EDGE (see pifacecommon v3.1.1).
        - Updated radio example to use a more sensible `prog` name for LIRC and to
          use the custom lircrc file at the Debian examples location. Also added
          mplayer detection and ability to operate without lirc configured.
        - Fixed Python 2 support in tools.scanf.
        - Limited support for some examples (Radio, Weather and Train Times are
          Python 3 only). Feel free to add in support and submit a patch. :)
        
        v1.0.0
        ------
        - Initial release.
        
Keywords: piface cad control display raspberrypi openlx
Platform: UNKNOWN
Classifier: License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)
Classifier: Programming Language :: Python :: 3
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires: pifacecommon
Requires: lirc
